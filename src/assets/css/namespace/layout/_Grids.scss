/*
---
name: l-Grids
namespace: l-
category: Layout
---

バリエーションの豊富なグリッドシステムです。親要素（`.l-Grids`）にクラスを追加することで、1/2や1/3のような均等なカラムや、8/12と4/12のようなカラムの指定ができます。

余白とカラム数は4つの変数で変更できます。

- `$l-grids-column-gap` カラムの左右の余白（ガター）を指定します。
- `$l-grids-row-gap` カラムの上下の余白を指定します。
- `$l-grids-equal-column` 6/12と6/12のような均等なカラムを生成します。
- `$l-grids-two-column` 8/12と4/12のような均等ではない2カラムにします。

以下のような指定ができます。

- `.l-Grids-col2`のように1/2から1/5までの均等なカラム指定。
- `.l-Grids-col8to4`のように1/12と11/12から5/12と7/12、7/12と5/12から11/12と1/12までの合計10パターンのカラム指定。
- `.l-Grids-middle`のようにカラムの垂直位置を上・中央・下揃え。
- `.l-Grids-col2Md`のように`Sm`、`Md`、`Lg`、`Xl`を追加してブレイクポイント（`$mq-breakpoints`の`key`）の指定。カラム指定と垂直位置の指定に追加できます。

### 均等なカラム指定。

```jade
.l-Wrapper
  .l-Grids.l-Grids-col2Md
    .l-Grids_Item
      .test-Box One<br>1/1 → 1/2
    .l-Grids_Item
      .test-Box Two<br>1/1 → 1/2
    .l-Grids_Item
      .test-Box Three<br>1/1 → 1/2
    .l-Grids_Item
      .test-Box Four<br>1/1 → 1/2

  .l-Grids.l-Grids-col2.l-Grids-col3Md
    .l-Grids_Item
      .test-Box One<br>1/2 → 1/3
    .l-Grids_Item
      .test-Box Two<br>1/2 → 1/3
    .l-Grids_Item
      .test-Box Three<br>1/2 → 1/3
    .l-Grids_Item
      .test-Box Four<br>1/2 → 1/3
```

### 8/12と4/12と4/12と8/12のカラム指定。

```jade
.l-Wrapper
  .l-Grids.l-Grids-col8to4Md
    .l-Grids_Item
      .test-Box One<br>1/1 → 8/12
    .l-Grids_Item
      .test-Box Two<br>1/1 → 4/12
    .l-Grids_Item
      .test-Box Three<br>1/1 → 8/12
    .l-Grids_Item
      .test-Box Four<br>1/1 → 4/12

  .l-Grids.l-Grids-col4to8Md
    .l-Grids_Item
      .test-Box One <br>1/1 → 4/12
    .l-Grids_Item
      .test-Box Two<br>1/1 → 8/12
    .l-Grids_Item
      .test-Box Three <br>1/1 → 4/12
    .l-Grids_Item
      .test-Box Four<br>1/1 → 8/12
```

### 8/12と4/12のカラム指定かつ、`md`以上で要素を反転。

```jade
.l-Wrapper
  .l-Grids.l-Grids-col8to4Md.l-Grids-reverseMd
    .l-Grids_Item
      .test-Box One<br>1/1 → 8/12
    .l-Grids_Item
      .test-Box Two<br>1/1 → 4/12
```

### カラムの垂直位置を上揃え。

```jade
.l-Wrapper
  .l-Grids.l-Grids-topMd.l-Grids-col2Md
    .l-Grids_Item
      .test-Box One<br>1/1 → 6/12<br>.l-Grids-top<br>.l-Grids-middle
    .l-Grids_Item
      .test-Box Two<br>1/1 → 6/12
```

### カラムの垂直位置を中央揃え。

```jade
.l-Wrapper
  .l-Grids.l-Grids-middleMd.l-Grids-col2Md
    .l-Grids_Item
      .test-Box One<br>1/1 → 6/12<br>.l-Grids-middle<br>.l-Grids-middle
    .l-Grids_Item
      .test-Box Two<br>1/1 → 6/12
```

### カラムの垂直位置を下揃え。

```jade
.l-Wrapper
  .l-Grids.l-Grids-bottomMd.l-Grids-col2Md
    .l-Grids_Item
      .test-Box One<br>1/1 → 6/12<br>.l-Grids-bottom<br>.l-Grids-middle
    .l-Grids_Item
      .test-Box Two<br>1/1 → 6/12
```
*/
// カラムの左右の余白（ガター）を指定します。
// すべて指定してください。
$l-grids-column-gap: (
  "initial": $grid-column-gap,
  "sm": $grid-column-gap,
  "md": $grid-column-gap-md,
  "lg": $grid-column-gap-md,
  "xl": $grid-column-gap-md,
) !default;

// カラムの上下の余白を指定します。
// すべて指定してください。
$l-grids-row-gap: (
  "initial": $grid-row-gap,
  "sm": $grid-row-gap,
  "md": $grid-row-gap-md,
  "lg": $grid-row-gap-md,
  "xl": $grid-row-gap-md,
) !default;

// 6/12と6/12のような均等なカラムを生成します。
// `2, 3`と指定すると1/2と1/3用のクラスが生成されます。
$l-grids-equal-column: 2, 3, 4, 5 !default;

// 8/12と4/12のような均等ではない2カラムにします。
$l-grids-two-column: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 !default;

.l-Grids {
  -js-display: flex;
  display: flex;
  flex-wrap: wrap;
  margin-top: rem(map-get($l-grids-row-gap, initial));
  margin-left: rem(map-get($l-grids-column-gap, initial) * -1);
  padding-left: 0;
  list-style-type: none;
}

@each $name, $breakpoint in $mq-breakpoints {
  @media print, screen and (min-width: em($breakpoint)) {
    .l-Grids {
      margin-top: rem(map-get($l-grids-row-gap, $name));
      margin-left: rem(map-get($l-grids-column-gap, $name) * -1);
    }
  }
}

.l-Grids_Item {
  flex-basis: 100%;
  max-width: 100%;
  padding-left: rem(map-get($l-grids-column-gap, initial));

  & > :first-child {
    margin-top: 0;
  }

  & > :last-child {
    margin-bottom: 0;
  }

  &:nth-of-type(n + 1) {
    margin-top: 0;
  }

  &:nth-of-type(n + 2) {
    margin-top: rem(map-get($l-grids-row-gap, initial));
  }
}

@each $name, $breakpoint in $mq-breakpoints {
  @media print, screen and (min-width: em($breakpoint)) {
    .l-Grids_Item {
      padding-left: rem(map-get($l-grids-column-gap, $name));
    }
  }
}

@mixin equal-column($key: null) {
  $columns: $l-grids-equal-column;
  $suffix: uppercase-first-letter(#{$key});

  @each $column in $columns {
    .l-Grids-col#{$column}#{$suffix} > .l-Grids_Item {
      flex-basis: percentage(1 / $column);
      max-width: percentage(1 / $column);

      &:nth-of-type(n + 1) {
        margin-top: 0;
      }

      @if $key == null {
        &:nth-of-type(n + #{$column + 1}) {
          margin-top: rem(map-get($l-grids-row-gap, initial));
        }
      }

      @if $key != null {
        &:nth-of-type(n + #{$column + 1}) {
          margin-top: rem(map-get($l-grids-row-gap, $key));
        }
      }
    }
  }
}

/**
 * 6/12と6/12のような均等なカラムを生成します。
 */
@include equal-column();

@each $name, $breakpoint in $mq-breakpoints {
  @media print, screen and (min-width: em($breakpoint)) {
    @include equal-column($name);
  }
}

@mixin two-column($key: null) {
  $columns: $l-grids-two-column;
  $suffix: uppercase-first-letter(#{$key});

  @each $column in $columns {
    $first-column: 12 - $column;
    $second-column: $column;

    .l-Grids-col#{$first-column}to#{$second-column}#{$suffix} > .l-Grids_Item {
      &:nth-of-type(odd) {
        flex-basis: percentage($first-column / 12);
        max-width: percentage($first-column / 12);
      }

      &:nth-of-type(even) {
        flex-basis: percentage($second-column / 12);
        max-width: percentage($second-column / 12);
      }

      &:nth-of-type(n + 1) {
        margin-top: 0;
      }

      &:nth-of-type(n + 3) {
        @if $key == null {
          margin-top: rem(map-get($l-grids-row-gap, initial));
        }

        @if $key != null {
          margin-top: rem(map-get($l-grids-row-gap, $key));
        }
      }
    }
  }
}

/**
 * 8/12と4/12のような均等ではない2カラムにします。
 */
@include two-column();

@each $name, $breakpoint in $mq-breakpoints {
  @media print, screen and (min-width: em($breakpoint)) {
    @include two-column($name);
  }
}

/**
 * 要素の垂直位置を上寄せにします。
 */
.l-Grids-top {
  align-items: flex-start;
}

@each $name, $breakpoint in $mq-breakpoints {
  @media print, screen and (min-width: em($breakpoint)) {
    .l-Grids-top#{uppercase-first-letter($name)} {
      align-items: flex-start;
    }
  }
}

/**
 * 要素の垂直位置を真ん中寄せにします。
 */
.l-Grids-middle {
  align-items: center;
}

@each $name, $breakpoint in $mq-breakpoints {
  @media print, screen and (min-width: em($breakpoint)) {
    .l-Grids-middle#{uppercase-first-letter($name)} {
      align-items: center;
    }
  }
}

/**
 * 要素の垂直位置を下寄せにします。
 */
.l-Grids-bottom {
  align-items: flex-end;
}

@each $name, $breakpoint in $mq-breakpoints {
  @media print, screen and (min-width: em($breakpoint)) {
    .l-Grids-bottom#{uppercase-first-letter($name)} {
      align-items: flex-end;
    }
  }
}

/**
 * `.l-Grids_Item`の表示順を逆にします。
 * A,B → B,A
 */
.l-Grids-reverse {
  flex-direction: row-reverse;
}

@each $name, $breakpoint in $mq-breakpoints {
  @media print, screen and (min-width: em($breakpoint)) {
    .l-Grids-reverse#{uppercase-first-letter($name)} {
      flex-direction: row-reverse;
    }
  }
}

/**
 * `.l-Grids_Item`の表示順を戻します。
 * B,A → A,B
 */
.l-Grids-row {
  flex-direction: row;
}

@each $name, $breakpoint in $mq-breakpoints {
  @media print, screen and (min-width: em($breakpoint)) {
    .l-Grids-row#{uppercase-first-letter($name)} {
      flex-direction: row;
    }
  }
}
